'use client'
import { FC, useState } from 'react'
import classNames from 'classnames'
import axios from 'axios'
import Link from 'next/link'

import styles from './form.module.scss'
import { FormProps } from './form.types'

const Form: FC<FormProps> = ({
  className,
  mail,
  project,
  work,
  quizData
}) => {
  const rootClassName = classNames(styles.root, className)
  const [successMessage, setSuccessMessage] = useState<string | null>(null)

  const handleNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value
    event.target.value = value.replace(/\d/g, '')
  }

  const handleNumberInput = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value
    event.target.value = value.replace(/\D/g, '')
  }

  const sanitizeInput = (input: string) => {
    const sanitized = input.replace(/<[^>]*>/g, '')
    if (sanitized !== input) {
      throw new Error('HTML tags are not allowed')
    }
    return sanitized
  }

  const isValidEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }

  const formatQuizData = (data: Record<number, string>) => {
    return Object.entries(data)
      .map(([step, answer]) => `–®–∞–≥ ${step}: ${answer}`)
      .join('\n')
  }

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const formData = new FormData(event.currentTarget)
    const data = Object.fromEntries(formData.entries())

    if (data.mail && !isValidEmail(data.mail as string)) {
      setSuccessMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å.')
      return
    }

    if (project) {
      try {
        data.project = sanitizeInput(data.project as string)
      } catch (error) {
        setSuccessMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. HTML —Ç–µ–≥–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.')
        return
      }
    }

    const token = '7862004029:AAFZ807gLMhUIzqjfh4DB62muUmzWv9JfrY'
    const chatId = '-4654232429'

    const quizResults = quizData ? `\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞:\n${formatQuizData(quizData)}` : ''

    const message = `üéØ *–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å SEO-—Å–∞–π—Ç–∞ KIM!*

üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –ò–º—è: ${data.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}${data.mail ? `\n‚Ä¢ –ü–æ—á—Ç–∞: ${data.mail}` : ''}

${data.project ? `üí° *–û –ø—Ä–æ–µ–∫—Ç–µ:*\n${data.project}\n` : ''}${quizResults ? `\nüìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:*${quizResults}` : ''}`

    try {
      await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
        chat_id: chatId,
        text: message,
      })
      setSuccessMessage('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error)
      setSuccessMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.')
    }
  }

  return (
    <div className={rootClassName}>
      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.form_wrapper}>
          <input
            type="text"
            name="name"
            placeholder='–ò–º—è'
            required
            onChange={handleNameInput}
            style={work ? { color: 'black', backgroundColor: '#FAFAFA' } : undefined}
          />
          <label className={styles.placeholder}>–ò–º—è*</label>
        </div>
        <div className={styles.form_wrapper}>
          <input
            type="text"
            name="phone"
            placeholder='–¢–µ–ª–µ—Ñ–æ–Ω'
            required
            onChange={handleNumberInput}
            style={work ? { color: 'black', backgroundColor: '#FAFAFA' } : undefined}
          />
          <label className={styles.placeholder}>–¢–µ–ª–µ—Ñ–æ–Ω*</label>
        </div>
        {/* –ß–∞—Å—Ç—å —Ñ–æ—Ä–º—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞–±–æ—Ç–∞ —É –Ω–∞—Å */}
        {work !== undefined && (
          <div className={styles.form_wrapper}>
            <input type="text" name="url" placeholder='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ' onFocus={(e) => e.target.placeholder = ''} onBlur={(e) => e.target.placeholder = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ'} style={work ? { color: 'black', backgroundColor: '#FAFAFA' } : undefined} />
            <label className={styles.placeholder}>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ</label>
          </div>
        )}
        {work !== undefined && (
          <div className={styles.form_wrapper}>
            <textarea name="project" placeholder='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç' onFocus={(e) => e.target.placeholder = ''} style={work ? { color: 'black', backgroundColor: '#FAFAFA' } : undefined} onBlur={(e) => e.target.placeholder = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç'} ></textarea>
            <label className={styles.placeholder}>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç</label>
          </div>
        )}

        {/* –ß–∞—Å—Ç—å —Ñ–æ—Ä–º—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ä–º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
        {mail !== undefined && (
          <div className={styles.form_wrapper}>
            <input
              type="mail"
              name="mail"
              placeholder='–ü–æ—á—Ç–∞'
              onFocus={(e) => e.target.placeholder = ''}
              onBlur={(e) => e.target.placeholder = '–ü–æ—á—Ç–∞'}
            />
            <label className={styles.placeholder}>–ü–æ—á—Ç–∞</label>
          </div>
        )}
        {project !== undefined && (
          <div className={styles.form_wrapper}>
            <textarea
              name="project"
              placeholder='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç'
              onFocus={(e) => e.target.placeholder = ''}
              onBlur={(e) => e.target.placeholder = '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç'}
            />
            <label className={styles.placeholder}>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç</label>
          </div>
        )}
        <div className={styles.form_wrapper}>
          <input type="checkbox" required />
          <label style={work ? { color: 'black' } : undefined}>
            –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É <Link href='/privacy-policy' target='_blank' style={work ? { color: '#CB172C' } : undefined}>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</Link>
          </label>
        </div>
        {mail !== undefined && (
          <div className={styles.form_wrapper}>
            <input type="checkbox" />
            <label>–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ email - —Ä–∞—Å—Å—ã–ª–æ–∫</label>
          </div>
        )}
        {work !== undefined && (
          <div className={styles.form_wrapper}>
            <input type="checkbox" />
            <label style={work ? { color: 'black' } : undefined}>–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ email - —Ä–∞—Å—Å—ã–ª–æ–∫</label>
          </div>
        )}
        <div className={styles.form_wrapper}>
          <input type="submit" value={'–û—Ç–ø—Ä–∞–≤–∏—Ç—å'} />
        </div>
        {successMessage && (
          <div className={styles.successMessage}>
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect width="24" height="24" rx="12" fill="white" />
              <path d="M8 12L11.5 16L16 7" stroke="#CB172C" strokeWidth="1.5" strokeLinecap="round" />
            </svg>
            {successMessage}
          </div>
        )}
      </form>
    </div>
  )
}

export default Form
